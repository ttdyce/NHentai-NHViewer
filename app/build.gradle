apply plugin: 'com.android.application'
apply plugin: "org.ajoberstar.grgit"

import org.ajoberstar.grgit.Grgit
import org.ajoberstar.grgit.Tag

def isAppCenter = System.getenv("isAppCenter") == "true"

ext {
    //Git tag as version name, using org.ajoberstar.grgit.Grgit
    git = Grgit.open(currentDir: project.rootDir)
    tags = git.tag.list()

    // sort tags in integer way, default in string way
    // e.g. after sort: (latest)2.10.0 > 2.9.0 > 2.8.0, default: (latest)2.9.0 > ... > 2.2.0 > 2.10.0 ðŸ˜‘
    Collections.sort(tags, new Comparator<Tag>() {
        @Override
        int compare(Tag a, Tag b) {
            ArrayList<Tag> aNames = a.name.split("\\.")
            ArrayList<Tag> bNames = b.name.split("\\.")

            int bigVersionDiff = Integer.parseInt(aNames[0]) - Integer.parseInt(bNames[0])
            int featureVersionDiff = Integer.parseInt(aNames[1]) - Integer.parseInt(bNames[1])
            int bugfixVersionDiff = Integer.parseInt(aNames[2]) - Integer.parseInt(bNames[2])

            return bigVersionDiff > 0 || featureVersionDiff > 0 || bugfixVersionDiff > 0 ? 1 : 0
        }
    })

    gitVersionCode = tags.size()
    gitVersionName = tags[tags.size()-1].getName()

    if (isAppCenter && System.getenv("branch") == "distribution"){
        gitVersionCode += 14 // missing simple tag on azure repo
    }

    println 'gitVersionCode'
    println 'gitVersionName'
    println gitVersionCode
    println gitVersionName
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    // not needed locally (Default is 21.0.6113669), but appcenter don't have 21.0.6113669
    ndkVersion "23.2.8568313"
    defaultConfig {
        applicationId "com.github.ttdyce.nhviewer"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode gitVersionCode
        versionName gitVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //for blur
        renderscriptTargetApi 28
        renderscriptSupportModeEnabled true
        signingConfig signingConfigs.debug
        //export AppDatabase (Room database) to /schemas/*.json
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    signingConfigs {
        config
        release
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.config
//            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    //signing with VSAppCenter config for release
    if (isAppCenter) {
        // configure keystore
        signingConfigs.release.storeFile = signingConfigs.config.storeFile = file("myapps.jks")
        signingConfigs.release.storePassword = signingConfigs.config.storePassword = System.getenv("keystore_password")
        signingConfigs.release.keyAlias = signingConfigs.config.keyAlias = System.getenv("keystore_alias")
        signingConfigs.release.keyPassword = signingConfigs.config.keyPassword = System.getenv("keystore_alias_password")
    }else{
        //signing with {project_root}/keystore.properties if exists
        def ksFile = rootProject.file('keystore.properties')
        def props = new Properties()

        if (ksFile.canRead()) {
            println 'Reading \'keystore.properties\'!'
            props.load(new FileInputStream(ksFile))

            if (props != null) {
                android.signingConfigs.config.storeFile file(props['KEYSTORE_FILE'])
                android.signingConfigs.config.storePassword props['KEYSTORE_PASSWORD']
                android.signingConfigs.config.keyAlias props['KEYSTORE_ALIAS']
                android.signingConfigs.config.keyPassword props['KEYSTORE_ALIAS_PASSWORD']

                android.signingConfigs.release.storeFile file(props['KEYSTORE_FILE'])
                android.signingConfigs.release.storePassword props['KEYSTORE_PASSWORD']
                android.signingConfigs.release.keyAlias props['KEYSTORE_ALIAS']
                android.signingConfigs.release.keyPassword props['KEYSTORE_ALIAS_PASSWORD']
            } else {
                println 'some entries in \'keystore.properties\' not found!'
            }
        } else {
            println '\'keystore.properties\' not found! Using default signing config'
            android.signingConfigs.config.storeFile android.signingConfigs.debug.storeFile
            android.signingConfigs.config.storePassword android.signingConfigs.debug.storePassword
            android.signingConfigs.config.keyAlias android.signingConfigs.debug.keyAlias
            android.signingConfigs.config.keyPassword android.signingConfigs.debug.keyPassword
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    def nav_version = '2.2.2'
    def room_version = '2.4.0'
    def preference_version = '1.1.1'
    def appCenterSdkVersion = '4.1.0'

    // jsoup HTML parser library @ https://jsoup.org/
    implementation 'org.jsoup:jsoup:1.13.1'

    // Visual Studio App Center
    implementation "com.microsoft.appcenter:appcenter-analytics:${appCenterSdkVersion}"
    implementation "com.microsoft.appcenter:appcenter-crashes:${appCenterSdkVersion}"
    implementation "com.microsoft.appcenter:appcenter-distribute:${appCenterSdkVersion}"

    implementation "com.github.bumptech.glide:volley-integration:4.11.0"

    implementation 'androidx.browser:browser:1.3.0' // fix firebase auth ClassNotFoundException

    // Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:26.8.0')

    // Declare the dependency for the Firebase Authentication library
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-auth'

    implementation "com.github.bumptech.glide:volley-integration:4.11.0"

    implementation 'com.google.android.material:material:1.1.0'
    //image transformations for Glide (for blur image)
    implementation 'jp.wasabeef:glide-transformations:4.3.0'
    //QRCode scanner
    implementation 'com.dlazaro66.qrcodereaderview:qrcodereaderview:2.0.2'
    //ROOM
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    //Glide
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
    //preferenceFragment
    implementation "androidx.preference:preference:$preference_version"
    //for Jetpack navigation
    implementation "androidx.navigation:navigation-fragment:$nav_version"
    implementation "androidx.navigation:navigation-ui:$nav_version"
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.android.volley:volley:1.2.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'org.json:json:20200518'//for unit test using json
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

apply plugin: 'com.google.gms.google-services'
